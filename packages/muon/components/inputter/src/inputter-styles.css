@import "@muonic/muon/css/default.css";
@import "./inputter-extends.css";

:host {
  display: block;

  & ::slotted(label) {
    @extend %label;
  }

  & ::slotted(*){
    &::placeholder {
      @extend %placeholder;
    }
  }

  & ::slotted(:is(
  input[type="date"],
  input[type="email"],
  input[type="number"],
  input[type="password"],
  input[type="search"],
  input[type="tel"],
  input[type="text"],
  select,
  textarea)) {
    @extend %input;

    font-size: $INPUTTER_FIELD_FONT_SIZE;
  }

  & ::slotted(:is(
  input[type="date"]:hover,
  input[type="email"]:hover,
  input[type="number"]:hover,
  input[type="password"]:hover,
  input[type="search"]:hover,
  input[type="tel"]:hover,
  input[type="text"]:hover,
  select:hover,
  textarea:hover)) {
    @extend %input-hover;
  }

  & ::slotted(:is(
  input[type="date"]:focus,
  input[type="email"]:focus,
  input[type="number"]:focus,
  input[type="password"]:focus,
  input[type="search"]:focus,
  input[type="tel"]:focus,
  input[type="text"]:focus,
  select:focus,
  textarea:focus)) {
    @extend %input-focus;
  }

  & .has-disabled {
    & ::slotted(:is(
    input[type="date"]:disabled,
    input[type="email"]:disabled,
    input[type="number"]:disabled,
    input[type="password"]:disabled,
    input[type="search"]:disabled,
    input[type="tel"]:disabled,
    input[type="text"]:disabled,
    select:disabled,
    textarea:disabled)) {
      @extend %input-disabled;
    }

    & ::slotted(*:disabled)::placeholder {
      @extend %placeholder-disabled;
    }
  }

  & .wrapper {
    position: relative;

    /* NOTE: this calc will take the `ch` value in the `inputter.field.xxxx.max.width` token
    * and add the inline padding and border width to produce the `max-width` value. This allows the token value
    * to be equal to the amount of characters that will fit in the field.
    * The `ch` unit is equal to the width of the `0` charachter in the font.
    * Consider using a monospace font if accurate spacing is required (as we do in the masked inputter).
    * This could benefit from the `tnum` OpenType feature of a font file.
    * With a fallback to $THEME_FONT_LINE_LENGTH if the variable is not defined.
    */
    max-width: calc(
      var(--inputter-field-max-width, $THEME_FONT_LINE_LENGTH)
      + $INPUTTER_FIELD_PADDING_INLINE_START
      + $INPUTTER_FIELD_PADDING_INLINE_END
      + $INPUTTER_FIELD_BORDER_WIDTH
      + $INPUTTER_FIELD_BORDER_WIDTH
    );
  }

  & .checkbox,
  & .radio {
    & .wrapper {
      display: grid; /* NOTE: using `grid` to control the layout of `<input>` and `<label>` */
      line-height: 1.2; /* NOTE: setting `line-height` here to control the position of the checkbox and radio input */
      grid-template-columns: $INPUTTER_MULTIPLE_SIZE auto;
      row-gap: $INPUTTER_MULTIPLE_ROW_GAP;
    }

    & ::slotted(:is(
    input[type="checkbox"],
    input[type="radio"])) {
      @extend %input-multiple;
    }

    & ::slotted(:is(
    input[type="checkbox"]:hover,
    input[type="radio"]:hover)) {
      @extend %input-multiple-hover;
    }

    & ::slotted(:is(
    input[type="checkbox"]:focus-visible,
    input[type="radio"]:focus-visible)) {
      @extend %input-multiple-focus;
    }

    &.has-disabled {
      & ::slotted(:is(
      input[type="checkbox"]:disabled,
      input[type="radio"]:disabled)) {
        @extend %input-multiple-disabled;
      }
    }

    & ::slotted(input[type="checkbox"]) {
      @extend %input-checkbox;
    }

    & ::slotted(input[type="radio"]) {
      @extend %input-radio;
    }

    & ::slotted(input[type="radio"]:checked)::before {
      @extend %input-radio-checked-before;
    }

    & ::slotted(input[type="checkbox"]:checked)::before {
      @extend %input-checkbox-checked-before;
    }

    & ::slotted(label) {
      @extend %label-multiple;
    }

    & ::slotted(label:hover) {
      @extend %label-multiple-hover;
    }
  }

  /* stylelint-disable no-descending-specificity */
  & ::slotted(:is(
  select,
  input[type="date"])) {
    @extend %input-select;
  }

  & ::slotted(input[type="search"]) {
    @extend %input-search;
  }

  & ::slotted(textarea) {
    @extend %input-textarea;
  }
  /* stylelint-enable no-descending-specificity */

  & .date,
  & .search,
  & .select {
    & .wrapper {
      & inputter-icon {
        pointer-events: none;
        position: absolute;
        top: 50%;
        transform: translateY(-50%);
        width: $INPUTTER_FIELD_ICON_SIZE;
        height: $INPUTTER_FIELD_ICON_SIZE;
      }
    }
  }

  & .date,
  & .select {
    & .wrapper {
      width: fit-content;

      & inputter-icon {
        right: calc($INPUTTER_FIELD_BORDER_WIDTH + ($INPUTTER_FIELD_PADDING_INLINE_END / 2));
      }
    }
  }

  & .search {
    & .wrapper {
      & inputter-icon {
        left: calc($INPUTTER_FIELD_BORDER_WIDTH + ($INPUTTER_FIELD_PADDING_INLINE_START / 2));
      }
    }
  }

  & .has-mask {
    position: relative;

    & .input-mask,
    & ::slotted(:is(
      input[type="email"],
      input[type="number"],
      input[type="search"],
      input[type="tel"],
      input[type="text"])) {
      @extend %input-mask;
    }

    & .input-mask {
      padding-block-start: $INPUTTER_FIELD_PADDING_BLOCK_START;
      padding-block-end: $INPUTTER_FIELD_PADDING_BLOCK_END;
      padding-inline-start: $INPUTTER_FIELD_PADDING_INLINE_START;
      padding-inline-end: $INPUTTER_FIELD_PADDING_INLINE_END;
      border-width: $INPUTTER_FIELD_BORDER_WIDTH;
      border-style: $INPUTTER_FIELD_BORDER_STYLE;
      border-color: transparent;
      border-radius: $INPUTTER_FIELD_BORDER_RADIUS;
      position: absolute;
      top: 0;
      right: 0;
      bottom: 0;
      left: 0;
      color: $INPUTTER_MASK_COLOR;
      pointer-events: none;
      white-space: pre;
      line-height: $INPUTTER_FIELD_LINE_HEIGHT;
      text-align: start;
    }

    & .wrapper {
      max-width: calc(
        (var(--maxlength))
        * 1ch
        + $INPUTTER_FIELD_PADDING_INLINE_START
        + $INPUTTER_FIELD_PADDING_INLINE_END
        + $INPUTTER_FIELD_BORDER_WIDTH
        + $INPUTTER_FIELD_BORDER_WIDTH
      );
   }

    & ::slotted(input[type="text"]) {
      @extend %input-mask-text;
    }
  }

  & .validation {
    @extend %input-validation;
  }

  & .helper {
    margin-block-start: $INPUTTER_DETAIL_CONTENT_MARGIN_BLOCK_START;
    margin-block-end: $INPUTTER_DETAIL_CONTENT_MARGIN_BLOCK_END;
    color: $INPUTTER_DETAIL_COLOR;
    font-size: $INPUTTER_DETAIL_HEADING_FONT_SIZE;
  }
}
